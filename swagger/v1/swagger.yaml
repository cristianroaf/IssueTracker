---
openapi: 3.0.1
info:
  title: "Issue Tracker"
  version: 1.0.0
servers: 
  - url: https://blooming-dusk-00596.herokuapp.com/
  - url: https://4e3e98d67aee4ae48c9cbc98fb74399f.vfs.cloud9.us-east-2.amazonaws.com/
  - url: http://localhost:3000/

components:
  securitySchemes:
    ApiKeyAuth:        # arbitrary name for the security scheme
      type: apiKey
      in: query       # can be "header", "query" or "cookie"
      name: api_key  # name of the header, query parameter or cookie


  schemas:
    Issues:
      properties:
        id:
          type: integer
          example: 1
        Title:
          type: string
          example: Problems with Swagger
        Description:
          type: string
          example: Here explain the problem
        Type:          
          type: "string"
          enum:
            - Bug
            - Enhancement
            - Proposal
            - Task
        Priority:          
          type: "string"
          enum:
            - Trivial
            - Minor
            - Major
            - Critical
            - Blocker
        Status:          
          type: "string"
          enum:
            - New&Open
            - On hold
            - Resolved
            - Duplicate
            - Invalid
            - Won't fix
            - Closed
            - New&Open
        user_id:
          type: integer
          example: 1
        assignee_id:
          type: integer
          example: 2
        Votes:
          type: integer
          example: 3
        Watchers:
          type: integer
          example: 4
        created_at:
          type: string
          example: "2019-12-03T08:19:23.477Z"
        updated_at:
          type: string
          example: "2019-12-03T08:19:23.477Z"
    Comment:
      properties:
        id:
          type: integer
          example: 1
        text:
          type: string
          example: new comment
        user_id:
          type: integer
          example: 1
        issue_id:
          type: integer
          example: 1
        created_at:
          type: string
          example: "2019-12-03T08:19:23.477Z"
        updated_at:
          type: string
          example: "2019-12-03T08:19:23.477Z"



# 2) Apply the API key globally to all operations
security:
  - ApiKeyAuth: []     # use the same name as under securitySchemes

paths:
  "/api/issues":
    get:
      tags:
      - Issues
      summary: Gets the `Issue` object applying multiple filters and sort
      parameters:
      - in: query
        name: type
        description: Gets `Issue` objects by type
        required: false
        schema:
          type: "string"
          enum:
            - Bug
            - Enhancement
            - Proposal
            - Task
      - in: query
        name: priority
        description: Gets `Issue` objects by priority
        required: false
        schema:
          type: "string"
          enum:
            - Trivial
            - Minor
            - Major
            - Critical
            - Blocker
      - in: query
        name: status
        description: Gets `Issue` objects by status
        required: false
        schema:
          type: "string"
          enum:
            - New&Open
            - On hold
            - Resolved
            - Duplicate
            - Invalid
            - Won't fix
            - Closed
            - New&Open
      - in: query
        name: sort
        description: Sorts `Issue` objects by the desired condition
        required: false
        schema:
          type: "string"
          enum:
            - votes
            - priority
            - kind
            - status
            - assignee
            - created
            - updated
            - Title
            - -votes
            - -priority
            - -kind
            - -status
            - -assignee
            - -created
            - -updated
            - -Title
      - in: query
        name: assignee
        description: Gets `Issue` objects by assignee
        required: false
        schema:
          type: integer
      - in: query
        name: watcher
        description: Gets `Issue` objects watched by a user
        required: false
        schema:
          type: "string"
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad request
        '401':
          description: There is no user with such api_key
        '422':
          description: Unprocessable entity (wrong parameter)
          
    post:
      tags:
      - Issues
      summary: "Creates a new Issue with the specified parameters"
      parameters:
      - in: query
        schema:
          type: "string"
        name: "Title"
        required: true
      - in: query
        schema:
          type: "string"
        name: "Description"
        required: true
      - in: "query"
        name: Type
        description: Set the type of `Issue`
        required: true
        schema:
          type: "string"
          enum:
            - Bug
            - Enhancement
            - Proposal
            - Task
      - in: "query"
        name: Priority
        description: Set the priority of `Issue`
        required: true
        schema:
          type: "string"
          enum:
            - Trivial
            - Minor
            - Major
            - Critical
            - Blocker

      - in: "query"
        name: asignee_id
        description: Assigns the `Issue` to the desired user
        required: false
        schema:
          type: integer
      responses:
        '201':
          description: Issue created succesfully
        '401':
          description: There is no user with such api_key
        '422':
          description: Unprocessable entity (wrong parameter)
          
  "/api/issues/{id}/status":
    parameters:
    - name: id
      in: path
      schema:
          type: "string"
      description: id
      required: true
    - in: "query"
      name: Status
      description: Set the status of `Issue`
      required: false
      schema:
        type: "string"
        enum:
          - New
          - Open
          - On hold
          - Resolved
          - Duplicate
          - Invalid
          - Won't fix
          - Closed
    put:
      summary: Update status
      tags:
      - Issues
      responses:
        '200':
          description: successful
        '401':
          description: There is no user with such api_key
        '403':
          description: This issue does not belong to the user with such api_key
        '422':
          description: There is no issue with such id
            
  "/api/issues/{id}":
    parameters:
    - name: id
      in: path
      schema:
          type: "string"
      description: id
      required: true
    get:
      summary: Gets an Issue object identified by ID
      tags:
      - Issues
      responses:
        '200':
          description: successful
        '401':
          description: There is no user with such api_key
        '422':
          description: There is no issue with such id
    put:
      summary: update issue
      tags:
      - Issues
      parameters:
      - in: query
        schema:
          type: "string"
        name: "Title"
        required: true
      - in: query
        schema:
          type: "string"
        name: "Description"
        required: true
      - in: "query"
        name: Type
        description: Set the type of `Issue`
        required: true
        schema:
          type: "string"
          enum:
            - Bug
            - Enhancement
            - Proposal
            - Task
      - in: "query"
        name: Priority
        description: Set the priority of `Issue`
        required: true
        schema:
          type: "string"
          enum:
            - Trivial
            - Minor
            - Major
            - Critical
            - Blocker

      - in: "query"
        name: asignee_id
        description: Assigns the `Issue` to the desired user
        required: false
        schema:
          type: integer
      responses:
        '200':
          description: Issue updated succesfully
        '401':
          description: There is no user with such api_key
        '403':
          description: This issue does not belong to the user with such api_key
        '422':
          description: Unprocessable entity (wrong parameter)
    delete:
      summary: delete issue
      tags:
      - Issues
      responses:
        '200':
          description: Successfully deleted Issue
        '401':
          description: There is no user with such api_key
        '403':
          description: This issue does not belong to the user with such api_key
        '422':
          description: Unprocessable entity (wrong parameter)

  "/api/issues/{id}/vote":
    parameters:
    - name: id
      in: path
      schema:
        type: "string"
      description: "id issue"
      required: true
    post:
      summary: "vote an issue"
      tags:
      - Vote
      responses:
        '201':
          description: "Issue has been voted"
        '401':
          description: "There is no user with such api_key"
        '422':
          description: "There is no issue with such id"
        '422':
          description: "Ya has votado la issue con ese id"
          
  "/api/issues/{id}/unvote":
    parameters:
    - name: id
      in: path
      schema:
        type: "string"
      description: "id issue"
      required: true
    post:
      summary: "unvote an issue"
      tags:
      - Vote
      responses:
        '200':
          description: "Issue has been voted"
        '401':
          description: "There is no user with such api_key"
        '422':
          description: "There is no issue with such id"
        '422':
          description: "No has votado la issue con ese id"
          
  "/api/issues/{id}/watch":
    parameters:
    - name: id
      in: path
      schema:
        type: "string"
      description: id issue
      required: true
    post:
      summary: watch an issue
      tags:
      - Watch
      responses:
        '200':
          description: successful
        '401':
          description: "There is no user with such api_key"
        '422':
          description: "There is no issue with such id"
        '422':
          description: "Ya has watcheado la issue con ese id"
          
  "/api/issues/{id}/unwatch":
    parameters:
    - name: id
      in: path
      schema:
        type: "string"
      description: id issue
      required: true
    post:
      summary: unwatch an issue
      tags:
      - Watch
      responses:
        '200':
          description: successful
        '401':
          description: "There is no user with such api_key"
        '422':
          description: "There is no issue with such id"
        '422':
          description: "No estas watcheando la issue con ese id"

  "/api/issues/{issue_id}/comments":
    get:
      parameters:
      - name: issue_id
        in: path
        schema:
          type: "string"
        description: id of an existing issue
        required: true
      tags:
        - Comments
      description: Get the comments of an specific issue identified by issue_id
      summary: Get the comments of an issue
      responses:
        '200':
          description: Successful
        '401':
          description: There is no user with such api_key; please visit /users
        '404':
          description: The issue does not exist
    post:
      parameters:
      - name: issue_id
        in: path
        schema:
          type: "string"
        description: id of an existing issue
        required: true
      - name: text
        in: query
        schema:
          type: "string"
        description: Write the body of the new `comment` of the `Issue` identified by issue_id
        required: true
      tags:
        - Comments
      description: Creates a new comment on the issue identified by issue_id
      summary: Creates a new comment
      responses:
        '201':
          description: "Comment created succesfully"
        '401':
          description: "There is no user with such api_key"
        '404':
          description: "Could not find an issue with such issue_id"

  "/api/issues/{issue_id}/comments/{id}":
    parameters:
    - name: issue_id
      in: path
      schema:
        type: "string"
      description: id of an existing issue
      required: true
    - name: id
      in: path
      schema:
        type: "string"
      description: id of an existing comment of the issue identified by issue_id
      required: true
    get:
      tags:
      - Comments
      description: Gets and specific comment of the issue identified by issue_id
      summary: Gets an issue comment
      responses:
        '200':
          description: Successful
          schema:
            $ref: "#/components/schemas/Comments"
        '401':
          description: There is no user with such api_key; please visit /users
        '404':
          description: The issue or the comment does not exist
    put:
      parameters:
        - name: text  
          in: query
          schema:
            type: "string"
          description: Write the new body of the `comment` of the `Issue` identified by issue_id
          required: true          
      tags:
        - Comments
      summary: Updates the content of an issue comment
      description: Updates the content of the comment identified by id of the issue identified by issue_id
      responses:
        '200':
          description: Comment deleted successfully
        '401':
          description: There is no user with such api_key; please visit /users
        '403':
          description: You are not the creator of this issue
        '404':
          description: The issue or the comment does not exist
    delete:
      tags:
      - Comments
      summary: Deletes a comment
      description: Deletes the comment identified by id of the issue identified by issue_id
      responses:
        '200':
          description: Comment deleted successfully
        '401':
          description: There is no user with such api_key; please visit /users
        '403':
          description: You are not the creator of this issue
        '404':
          description: The issue or the comment does not exist
