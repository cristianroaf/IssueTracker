---
openapi: 3.0.1
info:
  title: "Issue Tracker"
  version: 1.0.0
servers: 
  - url: https://blooming-dusk-00596.herokuapp.com/
  - url: https://4e3e98d67aee4ae48c9cbc98fb74399f.vfs.cloud9.us-east-2.amazonaws.com/

components:
  securitySchemes:
    ApiKeyAuth:        # arbitrary name for the security scheme
      type: apiKey
      in: query       # can be "header", "query" or "cookie"
      name: api_key  # name of the header, query parameter or cookie
# 2) Apply the API key globally to all operations
security:
  - ApiKeyAuth: []     # use the same name as under securitySchemes

paths:
  "/api/issues":
    get:
      description: Gets the `Issue` object by the desired category 
      tags:
      - Done
      summary: "Gets all the Issues"
      parameters:
      - in: query
        name: type
        description: Gets `Issue` objects by type
        required: false
        schema:
          type: "string"
          enum:
            - Bug
            - Enhancement
            - Proposal
            - Task
        
      - in: query
        name: priority
        description: Gets `Issue` objects by priority
        required: false
        schema:
          type: "string"
          enum:
            - Trivial
            - Minor
            - Major
            - Critical
            - Blocker
      - in: query
        name: status
        description: Gets `Issue` objects by status
        required: false
        schema:
          type: "string"
          enum:
            - New
            - Open
            - On hold
            - Resolved
            - Duplicate
            - Invalid
            - Won't fix
            - Closed
            - New&Open
      - in: query
        name: assignee
        description: Gets `Issue` objects by assignee
        required: false
        schema:
          type: integer
      - in: query
        name: watcher
        description: Gets `Issue` objects watched by a user
        required: false
        schema:
          type: "string"
      responses:
        '200':
          description: Successful response
          
    post:
      tags:
      - Done
      summary: "Create a new Issue"
      description: ""
      parameters:
      - in: query
        schema:
          type: "string"
        name: "Title"
        required: true
      - in: query
        schema:
          type: "string"
        name: "Description"
        required: false
      - in: "query"
        name: Type
        description: Set the type of `Issue`
        required: false
        schema:
          type: "string"
          enum:
            - Bug
            - Enhancement
            - Proposal
            - Task
      - in: "query"
        name: Priority
        description: Set the priority of `Issue`
        required: false
        schema:
          type: "string"
          enum:
            - Trivial
            - Minor
            - Major
            - Critical
            - Blocker

      - in: "query"
        name: asignee_id
        description: Assigns the `Issue` to the desired user
        required: false
        schema:
          type: integer
      responses:
        '201':
          description: "Issue created succesfully"
        '401':
          description: "There is no user with such api_key"
        '422':
          description: "Semantic erros in the request"
          
  "/api/issues/{id}/status":
    parameters:
    - name: id
      in: path
      schema:
          type: "string"
      description: id
      required: true
    - in: "query"
      name: Status
      description: Set the status of `Issue`
      required: false
      schema:
        type: "string"
        enum:
          - New
          - Open
          - On hold
          - Resolved
          - Duplicate
          - Invalid
          - Won't fix
          - Closed
    put:
      summary: Update status
      tags:
      - "Done"
      responses:
        '200':
          description: successful
            
  "/api/issues/{id}":
    parameters:
    - name: id
      in: path
      schema:
          type: "string"
      description: id
      required: true
    get:
      summary: Get 'Issue' info from ID
      tags:
      - To-do
      responses:
        '200':
          description: successful
    put:
      summary: update issue
      tags:
      - To-do
      responses:
        '200':
          description: successful
    delete:
      summary: delete issue
      tags:
      - To-do
      responses:
        '200':
          description: successful

  "/api/issues/{id}/vote":
    parameters:
    - name: id
      in: path
      schema:
        type: "string"
      description: id
      required: true
    post:
      summary: vote issue
      tags:
      - To-do
      responses:
        '200':
          description: successful
  "/api/issues/{id}/unvote":
    parameters:
    - name: id
      in: path
      schema:
        type: "string"
      description: id
      required: true
    post:
      summary: vote issue
      tags:
      - To-do
      responses:
        '200':
          description: successful
  "/api/issues/{id}/watch":
    parameters:
    - name: id
      in: path
      schema:
        type: "string"
      description: id
      required: true
    post:
      summary: watch issue
      tags:
      - To-do
      responses:
        '200':
          description: successful
          
  "/api/issues/{id}/unwatch":
    parameters:
    - name: id
      in: path
      schema:
        type: "string"
      description: id
      required: true
    post:
      summary: watch issue
      tags:
      - To-do
      responses:
        '200':
          description: successful

  "/api/issues/{issue_id}/comments":
    parameters:
    - name: issue_id
      in: path
      schema:
        type: "string"
      description: issue_id
      required: true
    get:
      tags:
      - To-do
      summary: list comments
      responses:
        '200':
          description: successful
    post:
      tags:
      - To-do
      summary: create comment
      responses:
        '200':
          description: successful

  "/api/issues/{issue_id}/comments/{id}":
    parameters:
    - name: issue_id
      in: path
      schema:
        type: "string"
      description: issue_id
      required: true
    - name: id
      in: path
      schema:
        type: "string"
      description: comment_id
      required: true
    get:
      tags:
      - To-do
      summary: Get specific comment
      responses:
        '200':
          description: successful
    put:
      tags:
      - To-do
      summary: update comment
      responses:
        '200':
          description: successful
    delete:
      tags:
      - To-do
      summary: delete comment
      responses:
        '200':
          description: successful
